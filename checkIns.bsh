JIRA=$1
JIRA_NAME=$2
MAXJOBS=5
objectFld="Objects"
REL_BRANCH="develop"
BAU_BRANCH="master"

re='^[0-9]+$'
if ! [[ $JIRA =~ $re ]] ; then
   echo -e "\e[1;31m [ERROR] Not a number \e[0m" 
   exit 1
fi

LINE="============================================================================"
echo $LINE
echo "Your JIRA Nummber is: $JIRA and Your JIRA Title is: $JIRA_NAME"
printf "\n"

echo $LINE
CURRENTBRANCH="$(git branch --show-current)"
echo -e "YOU ARE PLANNING TO MAKE CHANGES TO \e[1;33m${CURRENTBRANCH}\e[0m BRANCH."
echo -e "\e[1;33mIS THIS CORRECT? PRESS ENTER TO PROCEED. OTHERWISE, PRESS CTRL-C TO EXIT. \e[0m"
read
if [ "$CURRENTBRANCH" = "$REL_BRANCH" ]; then 
	BRANCHPREFIX="feature_IPP"; 
elif [ "$CURRENTBRANCH" = "$BAU_BRANCH" ]; then 
	BRANCHPREFIX="hotfix_IPP"; 
else 
	bash ./checkInsOthers.bsh $JIRA $JIRA_NAME
	exit 0
fi; 

echo "Cleanup Prereq: Checking out ${CURRENTBRANCH} branch"
echo "Command: git checkout ${CURRENTBRANCH}"
git checkout ${CURRENTBRANCH}
printf "\n"

echo $LINE
echo "Cleanup Prereq: Deleting Old Feature Branch ${BRANCHPREFIX}-"
DEMO="$(git branch | grep ${BRANCHPREFIX})"

if [ -n "$DEMO" ]; then
	echo "$DEMO branch will deleted next!!"
	echo "Command: git branch -D $DEMO"
	git branch -D $DEMO
else
	echo "Nothing to delete"
fi
printf "\n"

echo $LINE
echo "Step 1: Pulling remote Repo"
echo "Command: git pull origin ${CURRENTBRANCH}"
if [[ ! $(git pull origin ${CURRENTBRANCH}) ]]; then
	echo "UNABLE TO CONNECT TO BITBUCKET. PLEASE CHECK YOUR CONNECTION OR REACH OUT TO ADMINISTRATOR FOR HELP."
    	echo "PRESS CTRL-C TO TERMINATE" 
  	read 
	exit 0
fi

printf "\n"

echo $LINE
echo "Step 2: Checking out feature branch"
DATE=$(date +%m%d%Y_%H%M%S);
echo "Command: git checkout -b ${BRANCHPREFIX}-$JIRA-$DATE"
git checkout -b ${BRANCHPREFIX}-$JIRA-$DATE
printf "\n"

echo $LINE
echo "Step 3: Checking the status"
echo "Command: git status -s"
git status -s | grep -v "Objects/" | grep -v "MANIFEST/"
printf "\n"

echo $LINE
echo -e "\e[1;33m PLEASE PRESS ENTER POST ADDING FILE TO YOUR WORKING DIRECTORY \e[0m"
echo -e "\e[1;33m TO QUIT, PRESS CTRL-C TO TERMINATE \e[0m"
read
printf "\n"

echo $LINE
echo "Step 4: Adding file to staging area"
echo "Command: git add ."
git add .
printf "\n"

echo $LINE
echo "Step 5: Checking the status"
echo "Command: git status -s"
git status -s | grep -v "Objects/" | grep -v "MANIFEST/"
printf "\n"

echo $LINE
echo -e "\e[1;33m PLEASE PRESS ENTER POST VERIFYING THE FILES TO CHECKIN \e[0m"
echo -e "\e[1;33m IF INCOMPLETE, PRESS CTRL-C TO TERMINATE \e[0m"
read
printf "\n"

if [ -d "$objectFld"/Status ]; then
	rm -r "$objectFld"/Status
fi
find Objects -type f -name "*.tmp" -delete

mkdir -p "$objectFld/Status/"

validate_type() { 
	FOLDER=$1 
    EXTENSION=$2 
    IS_VALIDATED=0 
    ZIP_COUNT=0
	FAIL=0

    while IFS= read -r file; do 
    	if [[ $file != *.${EXTENSION} ]]; then 
        	echo "[ERROR] $file is not of expected extension. Expected extension: ${EXTENSION}"
            IS_VALIDATED=1
		else
			if [[ "${EXTENSION}" == "zip" ]]; then 
				ZIP_COUNT=$((ZIP_COUNT+1))
				if (( ZIP_COUNT > 1 )); then
					echo "[ERROR] Detected more than 1 Export Zip in the commit. Please make sure there is only 1 Exported Zip per checkin."
					IS_VALIDATED=1					
				fi

				count=0
				while read -r line; do
					count=$((count+1))
					CEIfile=$(echo "$line" | sed 's/.*conf\///')
					{ ./readCEI.bsh "${file}" "$CURRENTBRANCH" "${CEIfile}" ; echo "$?" > $objectFld/Status/$(date +"%Y_%m_%d_%H_%M_%S")_${BASHPID}.txt; } &

				done < <(unzip -l "$file" conf/*.cei | sed '1,3d;$d' | sed '$d')

				if [ $count -eq 0 ]; then 
					echo "[ERROR] ExportedZip $file is not a SCD generated zip package. This folder can only accept SCD generated zip exports. You can consider putting CEI files directly into CEI folder instead."
					IS_VALIDATED=1
				fi

				
			elif [[ "${EXTENSION}" == "cei" ]]; then
				{ ./readCEI.bsh "${file}" "$CURRENTBRANCH" ; echo "$?" > $objectFld/Status/$(date +"%Y_%m_%d_%H_%M_%S")_${BASHPID}.txt; } &
			fi 
			
			while true; do
				NUMJOBS=$(jobs | wc -l)
				#echo "NUMBJOBS=$NUMJOBS"
				test $NUMJOBS -lt $MAXJOBS && break
				sleep 1
			done
        fi 

    done < <(git diff --diff-filter=ACMRUX --name-only --cached ${FOLDER})
	
	wait
	
	errorStatus=$(grep "1" "$objectFld"/Status/*)
	
	
	if [[ ! -z "$errorStatus" ]]; then
		rm -r "$objectFld"/Status
		echo -e "\e[1;33m [ERROR] FOUND ISSUE WITH ADDED FILES. PRESS CTRL-C TO TERMINATE \e[0m"
		read
		exit 1
	fi
	
    return $IS_VALIDATED 
} 


validate(){ 
	IS_VALID=0
    if ! validate_type "CEI/" "cei"; then
    	IS_VALID=1
	fi
    
    if ! validate_type "ExportedZip/" "zip"; then
    	IS_VALID=1
	fi
	
	status=$(git status -s)
	if [ ! -n "$status" ];then
		echo "[ERROR] YOU HAVE NOT CHECKED IN ANY FILES. PLEASE ADD FILES TO YOUR WORKING DIRECTORY."
		IS_VALID=1
	fi 
    return $IS_VALID
} 



while ! validate; do
	echo $LINE
	echo "FOUND ISSUE WITH ADDED FILES, PLEASE PRESS ENTER POST CORRECTING ISSUES."
    echo "PRESS CTRL-C TO TERMINATE" 
  	read 
    git add . 
    git status -s | grep -v "Objects/" | grep -v "MANIFEST/"
done 


# Add Manifest file
Author=$(git config user.name)
Changes=$(git status -s | grep -v "Objects/" | grep -v "MANIFEST/")
mkdir -p MANIFEST 
echo "JIRA: ${JIRA}" >> MANIFEST/IPP-$JIRA-$DATE.txt
echo "Comment: ${JIRA_NAME}" >> MANIFEST/IPP-$JIRA-$DATE.txt
echo "Author: ${Author}" >> MANIFEST/IPP-$JIRA-$DATE.txt
echo "Date: ${DATE}" >> MANIFEST/IPP-$JIRA-$DATE.txt
echo $LINE >> MANIFEST/IPP-$JIRA-$DATE.txt
echo "Changes:" >> MANIFEST/IPP-$JIRA-$DATE.txt
echo "${Changes}" >> MANIFEST/IPP-$JIRA-$DATE.txt


warningStatus=$(grep "2" "$objectFld"/Status/*)
echo "WARN: $warningStatus"

if [[ ! -z "$warningStatus" ]]; then
	rm -r "$objectFld"/Status
	echo -e "\e[1;33m [WARNING] POTENTIAL MERGE CONFLICT FOUND. PLEASE VERIFY CEI OBJECT(s) MENTIONED ABOVE. \e[0m"
	read -p "Continue? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 1	
	echo "[INFO] RECORDED ACKNOWLEDGEMENT."
	echo "MERGE CONFLICT WARNING ACKNOWLEDGEMENT: YES" >> MANIFEST/IPP-$JIRA-$DATE.txt
	echo "OBJECTS: " >> MANIFEST/IPP-$JIRA-$DATE.txt
	
	find Objects -type f -name "*.tmp" -print0 | 
	while IFS= read -r -d '' line; do 
		mv "$line" "${line%.*}" 
		echo "${line%.*}" >> MANIFEST/IPP-$JIRA-$DATE.txt
	done
fi
	
rm -r "$objectFld"/Status

git add .

hasFileType(){ 
	FOLDER=$1 
	FileType=$2
	output=$(git diff --name-only --cached ${FOLDER})
    
	if [ -z "$output" ]; then 
		JIRA_NAME+="${FileType}: N"
	else 
		JIRA_NAME+="${FileType}: Y"
	fi
} 

JIRA_NAME+=" ["
hasFileType "CEI/ ExportedZip/" "CEI"
JIRA_NAME+=" , "
hasFileType "ManualInstructions/" "MANUALINST"
JIRA_NAME+="]"


echo $LINE
echo "Step 6: Commiting the changes"
echo "Command: git commit -m IPP-$JIRA $JIRA_NAME"
git commit -m "IPP-$JIRA $JIRA_NAME"
printf "\n"

echo $LINE
echo "Step 7: Pushing the Changes to Remote repo"
echo "Command: git push origin ${BRANCHPREFIX}-$JIRA-$DATE"
git push origin ${BRANCHPREFIX}-$JIRA-$DATE
printf "\n"

echo $LINE
echo "Step 8: Checking out ${CURRENTBRANCH} branch"
echo "Command: git checkout ${CURRENTBRANCH}"
git checkout ${CURRENTBRANCH}
printf "\n"

echo $LINE
echo "Step 9: Deleting Old Branch ${BRANCHPREFIX}-"
DEMO="$(git branch | grep ${BRANCHPREFIX})"

if [ -n "$DEMO" ]; then
	echo "$DEMO branched will deleted next!!"
	echo "Command: git branch -D $DEMO"
	git branch -D $DEMO
else
	echo "Nothing to delete"
fi
echo $LINE
printf "\n"

echo -e "\e[1;33m FILES CHECKED-IN. PLEASE PRESS ENTER AND PROCEED TO BITBUCKET TO CREATE THE PULL REQUEST \e[0m"
read